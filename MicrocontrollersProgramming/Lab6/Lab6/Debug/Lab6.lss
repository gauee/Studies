
Lab6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  000006da  0000076e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000050  0080006e  0080006e  0000077c  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  0000077c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000e48  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000edf  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000a0  00000000  00000000  00000f0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000455  00000000  00000000  00000fae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000001f9  00000000  00000000  00001403  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000323  00000000  00000000  000015fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000022c  00000000  00000000  00001920  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001cd  00000000  00000000  00001b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000431  00000000  00000000  00001d19  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000080  00000000  00000000  0000214a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 34 02 	jmp	0x468	; 0x468 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ed       	ldi	r30, 0xDA	; 218
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 3b       	cpi	r26, 0xBE	; 190
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 60 02 	call	0x4c0	; 0x4c0 <main>
  8a:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <init>:
	}
	
	scheduled_task[new_task_idx].inteval = 0;
	scheduled_task[new_task_idx].to_go = ms;
	scheduled_task[new_task_idx].ready =0;
	scheduled_task[new_task_idx].task_ptr = t;
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	00 d0       	rcall	.+0      	; 0x98 <init+0x6>
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
  9c:	1a 82       	std	Y+2, r1	; 0x02
  9e:	19 82       	std	Y+1, r1	; 0x01
  a0:	44 c0       	rjmp	.+136    	; 0x12a <init+0x98>
  a2:	29 81       	ldd	r18, Y+1	; 0x01
  a4:	3a 81       	ldd	r19, Y+2	; 0x02
  a6:	c9 01       	movw	r24, r18
  a8:	88 0f       	add	r24, r24
  aa:	99 1f       	adc	r25, r25
  ac:	88 0f       	add	r24, r24
  ae:	99 1f       	adc	r25, r25
  b0:	88 0f       	add	r24, r24
  b2:	99 1f       	adc	r25, r25
  b4:	82 1b       	sub	r24, r18
  b6:	93 0b       	sbc	r25, r19
  b8:	88 58       	subi	r24, 0x88	; 136
	
	++new_task_idx;
  ba:	9f 4f       	sbci	r25, 0xFF	; 255
  bc:	fc 01       	movw	r30, r24
  be:	11 82       	std	Z+1, r1	; 0x01
  c0:	10 82       	st	Z, r1
  c2:	29 81       	ldd	r18, Y+1	; 0x01
  c4:	3a 81       	ldd	r19, Y+2	; 0x02
  c6:	c9 01       	movw	r24, r18
  c8:	88 0f       	add	r24, r24
  ca:	99 1f       	adc	r25, r25
  cc:	88 0f       	add	r24, r24
	
}

void add_one_shot(TASK_PTR t,int ms){
	if(new_task_idx == SCHEDULER_SIZE){
		return;
  ce:	99 1f       	adc	r25, r25
	scheduled_task[new_task_idx].to_go = ms;
	scheduled_task[new_task_idx].ready =0;
	scheduled_task[new_task_idx].task_ptr = t;
	
	++new_task_idx;
}
  d0:	88 0f       	add	r24, r24
  d2:	99 1f       	adc	r25, r25
  d4:	82 1b       	sub	r24, r18
  d6:	93 0b       	sbc	r25, r19
  d8:	84 58       	subi	r24, 0x84	; 132
  da:	9f 4f       	sbci	r25, 0xFF	; 255
  dc:	fc 01       	movw	r30, r24

void init(){
	
	for(int i=0;i<SCHEDULER_SIZE;++i){
		scheduled_task[i].task_ptr = 0;
		scheduled_task[i].inteval = 0;
  de:	11 82       	std	Z+1, r1	; 0x01
  e0:	10 82       	st	Z, r1
		scheduled_task[i].ready = 0;
  e2:	29 81       	ldd	r18, Y+1	; 0x01
  e4:	3a 81       	ldd	r19, Y+2	; 0x02
  e6:	c9 01       	movw	r24, r18
  e8:	88 0f       	add	r24, r24
  ea:	99 1f       	adc	r25, r25
  ec:	88 0f       	add	r24, r24
  ee:	99 1f       	adc	r25, r25
  f0:	88 0f       	add	r24, r24
  f2:	99 1f       	adc	r25, r25
  f4:	82 1b       	sub	r24, r18
  f6:	93 0b       	sbc	r25, r19
  f8:	82 58       	subi	r24, 0x82	; 130
  fa:	9f 4f       	sbci	r25, 0xFF	; 255
  fc:	fc 01       	movw	r30, r24
  fe:	10 82       	st	Z, r1
		scheduled_task[i].to_go = 0;
 100:	29 81       	ldd	r18, Y+1	; 0x01
 102:	3a 81       	ldd	r19, Y+2	; 0x02
 104:	c9 01       	movw	r24, r18
 106:	88 0f       	add	r24, r24
 108:	99 1f       	adc	r25, r25
 10a:	88 0f       	add	r24, r24
 10c:	99 1f       	adc	r25, r25
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	82 1b       	sub	r24, r18
 114:	93 0b       	sbc	r25, r19
 116:	86 58       	subi	r24, 0x86	; 134
 118:	9f 4f       	sbci	r25, 0xFF	; 255
 11a:	fc 01       	movw	r30, r24
 11c:	11 82       	std	Z+1, r1	; 0x01
 11e:	10 82       	st	Z, r1
	toInc+=10;
}

void init(){
	
	for(int i=0;i<SCHEDULER_SIZE;++i){
 120:	89 81       	ldd	r24, Y+1	; 0x01
 122:	9a 81       	ldd	r25, Y+2	; 0x02
 124:	01 96       	adiw	r24, 0x01	; 1
 126:	9a 83       	std	Y+2, r25	; 0x02
 128:	89 83       	std	Y+1, r24	; 0x01
 12a:	89 81       	ldd	r24, Y+1	; 0x01
 12c:	9a 81       	ldd	r25, Y+2	; 0x02
 12e:	8a 30       	cpi	r24, 0x0A	; 10
 130:	91 05       	cpc	r25, r1
 132:	0c f4       	brge	.+2      	; 0x136 <init+0xa4>
 134:	b6 cf       	rjmp	.-148    	; 0xa2 <init+0x10>
		scheduled_task[i].task_ptr = 0;
		scheduled_task[i].inteval = 0;
		scheduled_task[i].ready = 0;
		scheduled_task[i].to_go = 0;
	}
}
 136:	0f 90       	pop	r0
 138:	0f 90       	pop	r0
 13a:	df 91       	pop	r29
 13c:	cf 91       	pop	r28
 13e:	08 95       	ret

00000140 <start_timer>:

void start_timer(){
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
 144:	cd b7       	in	r28, 0x3d	; 61
 146:	de b7       	in	r29, 0x3e	; 62
	OCR0 = 250;
 148:	8c e5       	ldi	r24, 0x5C	; 92
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	2a ef       	ldi	r18, 0xFA	; 250
 14e:	fc 01       	movw	r30, r24
 150:	20 83       	st	Z, r18
	TCCR0 = (1 << WGM01) | (0 << WGM00) | (0 << CS02) | (1 << CS01) | (1 << CS00);
 152:	83 e5       	ldi	r24, 0x53	; 83
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	2b e0       	ldi	r18, 0x0B	; 11
 158:	fc 01       	movw	r30, r24
 15a:	20 83       	st	Z, r18
	TIMSK |= (1<<OCIE0);		//Enabling interrupt Timer/Counter0 Compare Match.
 15c:	89 e5       	ldi	r24, 0x59	; 89
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	29 e5       	ldi	r18, 0x59	; 89
 162:	30 e0       	ldi	r19, 0x00	; 0
 164:	f9 01       	movw	r30, r18
 166:	20 81       	ld	r18, Z
 168:	22 60       	ori	r18, 0x02	; 2
 16a:	fc 01       	movw	r30, r24
 16c:	20 83       	st	Z, r18
	sei();
 16e:	78 94       	sei
}
 170:	df 91       	pop	r29
 172:	cf 91       	pop	r28
 174:	08 95       	ret

00000176 <add_task>:

void add_task(TASK_PTR t,int ms){
 176:	cf 93       	push	r28
 178:	df 93       	push	r29
 17a:	00 d0       	rcall	.+0      	; 0x17c <add_task+0x6>
 17c:	00 d0       	rcall	.+0      	; 0x17e <add_task+0x8>
 17e:	cd b7       	in	r28, 0x3d	; 61
 180:	de b7       	in	r29, 0x3e	; 62
 182:	9a 83       	std	Y+2, r25	; 0x02
 184:	89 83       	std	Y+1, r24	; 0x01
 186:	7c 83       	std	Y+4, r23	; 0x04
 188:	6b 83       	std	Y+3, r22	; 0x03
	
	if(new_task_idx == SCHEDULER_SIZE){
 18a:	80 91 6e 00 	lds	r24, 0x006E
 18e:	90 91 6f 00 	lds	r25, 0x006F
 192:	8a 30       	cpi	r24, 0x0A	; 10
 194:	91 05       	cpc	r25, r1
 196:	09 f4       	brne	.+2      	; 0x19a <add_task+0x24>
 198:	57 c0       	rjmp	.+174    	; 0x248 <add_task+0xd2>
		return;
	}
	
	scheduled_task[new_task_idx].inteval = ms;
 19a:	20 91 6e 00 	lds	r18, 0x006E
 19e:	30 91 6f 00 	lds	r19, 0x006F
 1a2:	4b 81       	ldd	r20, Y+3	; 0x03
 1a4:	5c 81       	ldd	r21, Y+4	; 0x04
 1a6:	c9 01       	movw	r24, r18
 1a8:	88 0f       	add	r24, r24
 1aa:	99 1f       	adc	r25, r25
 1ac:	88 0f       	add	r24, r24
 1ae:	99 1f       	adc	r25, r25
 1b0:	88 0f       	add	r24, r24
 1b2:	99 1f       	adc	r25, r25
 1b4:	82 1b       	sub	r24, r18
 1b6:	93 0b       	sbc	r25, r19
 1b8:	84 58       	subi	r24, 0x84	; 132
 1ba:	9f 4f       	sbci	r25, 0xFF	; 255
 1bc:	fc 01       	movw	r30, r24
 1be:	51 83       	std	Z+1, r21	; 0x01
 1c0:	40 83       	st	Z, r20
	scheduled_task[new_task_idx].to_go = ms;
 1c2:	20 91 6e 00 	lds	r18, 0x006E
 1c6:	30 91 6f 00 	lds	r19, 0x006F
 1ca:	4b 81       	ldd	r20, Y+3	; 0x03
 1cc:	5c 81       	ldd	r21, Y+4	; 0x04
 1ce:	c9 01       	movw	r24, r18
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	88 0f       	add	r24, r24
 1d6:	99 1f       	adc	r25, r25
 1d8:	88 0f       	add	r24, r24
 1da:	99 1f       	adc	r25, r25
 1dc:	82 1b       	sub	r24, r18
 1de:	93 0b       	sbc	r25, r19
 1e0:	86 58       	subi	r24, 0x86	; 134
 1e2:	9f 4f       	sbci	r25, 0xFF	; 255
 1e4:	fc 01       	movw	r30, r24
 1e6:	51 83       	std	Z+1, r21	; 0x01
 1e8:	40 83       	st	Z, r20
	scheduled_task[new_task_idx].ready = 0;
 1ea:	20 91 6e 00 	lds	r18, 0x006E
 1ee:	30 91 6f 00 	lds	r19, 0x006F
 1f2:	c9 01       	movw	r24, r18
 1f4:	88 0f       	add	r24, r24
 1f6:	99 1f       	adc	r25, r25
 1f8:	88 0f       	add	r24, r24
 1fa:	99 1f       	adc	r25, r25
 1fc:	88 0f       	add	r24, r24
 1fe:	99 1f       	adc	r25, r25
 200:	82 1b       	sub	r24, r18
 202:	93 0b       	sbc	r25, r19
 204:	82 58       	subi	r24, 0x82	; 130
 206:	9f 4f       	sbci	r25, 0xFF	; 255
 208:	fc 01       	movw	r30, r24
 20a:	10 82       	st	Z, r1
	scheduled_task[new_task_idx].task_ptr = t;
 20c:	20 91 6e 00 	lds	r18, 0x006E
 210:	30 91 6f 00 	lds	r19, 0x006F
 214:	c9 01       	movw	r24, r18
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	88 0f       	add	r24, r24
 21c:	99 1f       	adc	r25, r25
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	82 1b       	sub	r24, r18
 224:	93 0b       	sbc	r25, r19
 226:	88 58       	subi	r24, 0x88	; 136
 228:	9f 4f       	sbci	r25, 0xFF	; 255
 22a:	29 81       	ldd	r18, Y+1	; 0x01
 22c:	3a 81       	ldd	r19, Y+2	; 0x02
 22e:	fc 01       	movw	r30, r24
 230:	31 83       	std	Z+1, r19	; 0x01
 232:	20 83       	st	Z, r18
	++new_task_idx;
 234:	80 91 6e 00 	lds	r24, 0x006E
 238:	90 91 6f 00 	lds	r25, 0x006F
 23c:	01 96       	adiw	r24, 0x01	; 1
 23e:	90 93 6f 00 	sts	0x006F, r25
 242:	80 93 6e 00 	sts	0x006E, r24
 246:	01 c0       	rjmp	.+2      	; 0x24a <add_task+0xd4>
}

void add_task(TASK_PTR t,int ms){
	
	if(new_task_idx == SCHEDULER_SIZE){
		return;
 248:	00 00       	nop
	scheduled_task[new_task_idx].to_go = ms;
	scheduled_task[new_task_idx].ready = 0;
	scheduled_task[new_task_idx].task_ptr = t;
	++new_task_idx;
	
}
 24a:	0f 90       	pop	r0
 24c:	0f 90       	pop	r0
 24e:	0f 90       	pop	r0
 250:	0f 90       	pop	r0
 252:	df 91       	pop	r29
 254:	cf 91       	pop	r28
 256:	08 95       	ret

00000258 <schedule>:
	scheduled_task[new_task_idx].task_ptr = t;
	
	++new_task_idx;
}

void schedule(){
 258:	cf 93       	push	r28
 25a:	df 93       	push	r29
 25c:	00 d0       	rcall	.+0      	; 0x25e <schedule+0x6>
 25e:	cd b7       	in	r28, 0x3d	; 61
 260:	de b7       	in	r29, 0x3e	; 62
	for(int i=0;i<new_task_idx;++i){
 262:	1a 82       	std	Y+2, r1	; 0x02
 264:	19 82       	std	Y+1, r1	; 0x01
 266:	8e c0       	rjmp	.+284    	; 0x384 <schedule+0x12c>
		if(scheduled_task[i].to_go){
 268:	29 81       	ldd	r18, Y+1	; 0x01
 26a:	3a 81       	ldd	r19, Y+2	; 0x02
 26c:	c9 01       	movw	r24, r18
 26e:	88 0f       	add	r24, r24
 270:	99 1f       	adc	r25, r25
 272:	88 0f       	add	r24, r24
 274:	99 1f       	adc	r25, r25
 276:	88 0f       	add	r24, r24
 278:	99 1f       	adc	r25, r25
 27a:	82 1b       	sub	r24, r18
 27c:	93 0b       	sbc	r25, r19
 27e:	86 58       	subi	r24, 0x86	; 134
 280:	9f 4f       	sbci	r25, 0xFF	; 255
 282:	fc 01       	movw	r30, r24
 284:	80 81       	ld	r24, Z
 286:	91 81       	ldd	r25, Z+1	; 0x01
 288:	00 97       	sbiw	r24, 0x00	; 0
 28a:	09 f4       	brne	.+2      	; 0x28e <schedule+0x36>
 28c:	76 c0       	rjmp	.+236    	; 0x37a <schedule+0x122>
			scheduled_task[i].to_go--;
 28e:	29 81       	ldd	r18, Y+1	; 0x01
 290:	3a 81       	ldd	r19, Y+2	; 0x02
 292:	c9 01       	movw	r24, r18
 294:	88 0f       	add	r24, r24
 296:	99 1f       	adc	r25, r25
 298:	88 0f       	add	r24, r24
 29a:	99 1f       	adc	r25, r25
 29c:	88 0f       	add	r24, r24
 29e:	99 1f       	adc	r25, r25
 2a0:	82 1b       	sub	r24, r18
 2a2:	93 0b       	sbc	r25, r19
 2a4:	86 58       	subi	r24, 0x86	; 134
 2a6:	9f 4f       	sbci	r25, 0xFF	; 255
 2a8:	fc 01       	movw	r30, r24
 2aa:	80 81       	ld	r24, Z
 2ac:	91 81       	ldd	r25, Z+1	; 0x01
 2ae:	ac 01       	movw	r20, r24
 2b0:	41 50       	subi	r20, 0x01	; 1
 2b2:	51 09       	sbc	r21, r1
 2b4:	29 81       	ldd	r18, Y+1	; 0x01
 2b6:	3a 81       	ldd	r19, Y+2	; 0x02
 2b8:	c9 01       	movw	r24, r18
 2ba:	88 0f       	add	r24, r24
 2bc:	99 1f       	adc	r25, r25
 2be:	88 0f       	add	r24, r24
 2c0:	99 1f       	adc	r25, r25
 2c2:	88 0f       	add	r24, r24
 2c4:	99 1f       	adc	r25, r25
 2c6:	82 1b       	sub	r24, r18
 2c8:	93 0b       	sbc	r25, r19
 2ca:	86 58       	subi	r24, 0x86	; 134
 2cc:	9f 4f       	sbci	r25, 0xFF	; 255
 2ce:	fc 01       	movw	r30, r24
 2d0:	51 83       	std	Z+1, r21	; 0x01
 2d2:	40 83       	st	Z, r20
			if(!scheduled_task[i].to_go){
 2d4:	29 81       	ldd	r18, Y+1	; 0x01
 2d6:	3a 81       	ldd	r19, Y+2	; 0x02
 2d8:	c9 01       	movw	r24, r18
 2da:	88 0f       	add	r24, r24
 2dc:	99 1f       	adc	r25, r25
 2de:	88 0f       	add	r24, r24
 2e0:	99 1f       	adc	r25, r25
 2e2:	88 0f       	add	r24, r24
 2e4:	99 1f       	adc	r25, r25
 2e6:	82 1b       	sub	r24, r18
 2e8:	93 0b       	sbc	r25, r19
 2ea:	86 58       	subi	r24, 0x86	; 134
 2ec:	9f 4f       	sbci	r25, 0xFF	; 255
 2ee:	fc 01       	movw	r30, r24
 2f0:	80 81       	ld	r24, Z
 2f2:	91 81       	ldd	r25, Z+1	; 0x01
 2f4:	00 97       	sbiw	r24, 0x00	; 0
 2f6:	09 f0       	breq	.+2      	; 0x2fa <schedule+0xa2>
 2f8:	40 c0       	rjmp	.+128    	; 0x37a <schedule+0x122>
				scheduled_task[i].ready++;
 2fa:	29 81       	ldd	r18, Y+1	; 0x01
 2fc:	3a 81       	ldd	r19, Y+2	; 0x02
 2fe:	c9 01       	movw	r24, r18
 300:	88 0f       	add	r24, r24
 302:	99 1f       	adc	r25, r25
 304:	88 0f       	add	r24, r24
 306:	99 1f       	adc	r25, r25
 308:	88 0f       	add	r24, r24
 30a:	99 1f       	adc	r25, r25
 30c:	82 1b       	sub	r24, r18
 30e:	93 0b       	sbc	r25, r19
 310:	82 58       	subi	r24, 0x82	; 130
 312:	9f 4f       	sbci	r25, 0xFF	; 255
 314:	fc 01       	movw	r30, r24
 316:	80 81       	ld	r24, Z
 318:	48 2f       	mov	r20, r24
 31a:	4f 5f       	subi	r20, 0xFF	; 255
 31c:	29 81       	ldd	r18, Y+1	; 0x01
 31e:	3a 81       	ldd	r19, Y+2	; 0x02
 320:	c9 01       	movw	r24, r18
 322:	88 0f       	add	r24, r24
 324:	99 1f       	adc	r25, r25
 326:	88 0f       	add	r24, r24
 328:	99 1f       	adc	r25, r25
 32a:	88 0f       	add	r24, r24
 32c:	99 1f       	adc	r25, r25
 32e:	82 1b       	sub	r24, r18
 330:	93 0b       	sbc	r25, r19
 332:	82 58       	subi	r24, 0x82	; 130
 334:	9f 4f       	sbci	r25, 0xFF	; 255
 336:	fc 01       	movw	r30, r24
 338:	40 83       	st	Z, r20
				scheduled_task[i].to_go = scheduled_task[i].inteval;
 33a:	29 81       	ldd	r18, Y+1	; 0x01
 33c:	3a 81       	ldd	r19, Y+2	; 0x02
 33e:	c9 01       	movw	r24, r18
 340:	88 0f       	add	r24, r24
 342:	99 1f       	adc	r25, r25
 344:	88 0f       	add	r24, r24
 346:	99 1f       	adc	r25, r25
 348:	88 0f       	add	r24, r24
 34a:	99 1f       	adc	r25, r25
 34c:	82 1b       	sub	r24, r18
 34e:	93 0b       	sbc	r25, r19
 350:	84 58       	subi	r24, 0x84	; 132
 352:	9f 4f       	sbci	r25, 0xFF	; 255
 354:	fc 01       	movw	r30, r24
 356:	40 81       	ld	r20, Z
 358:	51 81       	ldd	r21, Z+1	; 0x01
 35a:	29 81       	ldd	r18, Y+1	; 0x01
 35c:	3a 81       	ldd	r19, Y+2	; 0x02
 35e:	c9 01       	movw	r24, r18
 360:	88 0f       	add	r24, r24
 362:	99 1f       	adc	r25, r25
 364:	88 0f       	add	r24, r24
 366:	99 1f       	adc	r25, r25
 368:	88 0f       	add	r24, r24
 36a:	99 1f       	adc	r25, r25
 36c:	82 1b       	sub	r24, r18
 36e:	93 0b       	sbc	r25, r19
 370:	86 58       	subi	r24, 0x86	; 134
 372:	9f 4f       	sbci	r25, 0xFF	; 255
 374:	fc 01       	movw	r30, r24
 376:	51 83       	std	Z+1, r21	; 0x01
 378:	40 83       	st	Z, r20
	
	++new_task_idx;
}

void schedule(){
	for(int i=0;i<new_task_idx;++i){
 37a:	89 81       	ldd	r24, Y+1	; 0x01
 37c:	9a 81       	ldd	r25, Y+2	; 0x02
 37e:	01 96       	adiw	r24, 0x01	; 1
 380:	9a 83       	std	Y+2, r25	; 0x02
 382:	89 83       	std	Y+1, r24	; 0x01
 384:	80 91 6e 00 	lds	r24, 0x006E
 388:	90 91 6f 00 	lds	r25, 0x006F
 38c:	29 81       	ldd	r18, Y+1	; 0x01
 38e:	3a 81       	ldd	r19, Y+2	; 0x02
 390:	28 17       	cp	r18, r24
 392:	39 07       	cpc	r19, r25
 394:	0c f4       	brge	.+2      	; 0x398 <schedule+0x140>
 396:	68 cf       	rjmp	.-304    	; 0x268 <schedule+0x10>
				scheduled_task[i].to_go = scheduled_task[i].inteval;
			}
		}
	}
	
}
 398:	0f 90       	pop	r0
 39a:	0f 90       	pop	r0
 39c:	df 91       	pop	r29
 39e:	cf 91       	pop	r28
 3a0:	08 95       	ret

000003a2 <execute>:

void execute(){
 3a2:	cf 93       	push	r28
 3a4:	df 93       	push	r29
 3a6:	00 d0       	rcall	.+0      	; 0x3a8 <execute+0x6>
 3a8:	cd b7       	in	r28, 0x3d	; 61
 3aa:	de b7       	in	r29, 0x3e	; 62
		int i =0;
 3ac:	1a 82       	std	Y+2, r1	; 0x02
 3ae:	19 82       	std	Y+1, r1	; 0x01
		while(i < new_task_idx){
 3b0:	4c c0       	rjmp	.+152    	; 0x44a <execute+0xa8>
			if(scheduled_task[i].ready){
 3b2:	29 81       	ldd	r18, Y+1	; 0x01
 3b4:	3a 81       	ldd	r19, Y+2	; 0x02
 3b6:	c9 01       	movw	r24, r18
 3b8:	88 0f       	add	r24, r24
 3ba:	99 1f       	adc	r25, r25
 3bc:	88 0f       	add	r24, r24
 3be:	99 1f       	adc	r25, r25
 3c0:	88 0f       	add	r24, r24
 3c2:	99 1f       	adc	r25, r25
 3c4:	82 1b       	sub	r24, r18
 3c6:	93 0b       	sbc	r25, r19
 3c8:	82 58       	subi	r24, 0x82	; 130
 3ca:	9f 4f       	sbci	r25, 0xFF	; 255
 3cc:	fc 01       	movw	r30, r24
 3ce:	80 81       	ld	r24, Z
 3d0:	88 23       	and	r24, r24
 3d2:	b1 f1       	breq	.+108    	; 0x440 <execute+0x9e>
				scheduled_task[i].task_ptr();
 3d4:	29 81       	ldd	r18, Y+1	; 0x01
 3d6:	3a 81       	ldd	r19, Y+2	; 0x02
 3d8:	c9 01       	movw	r24, r18
 3da:	88 0f       	add	r24, r24
 3dc:	99 1f       	adc	r25, r25
 3de:	88 0f       	add	r24, r24
 3e0:	99 1f       	adc	r25, r25
 3e2:	88 0f       	add	r24, r24
 3e4:	99 1f       	adc	r25, r25
 3e6:	82 1b       	sub	r24, r18
 3e8:	93 0b       	sbc	r25, r19
 3ea:	88 58       	subi	r24, 0x88	; 136
 3ec:	9f 4f       	sbci	r25, 0xFF	; 255
 3ee:	fc 01       	movw	r30, r24
 3f0:	80 81       	ld	r24, Z
 3f2:	91 81       	ldd	r25, Z+1	; 0x01
 3f4:	fc 01       	movw	r30, r24
 3f6:	09 95       	icall
				scheduled_task[i].ready--;	
 3f8:	29 81       	ldd	r18, Y+1	; 0x01
 3fa:	3a 81       	ldd	r19, Y+2	; 0x02
 3fc:	c9 01       	movw	r24, r18
 3fe:	88 0f       	add	r24, r24
 400:	99 1f       	adc	r25, r25
 402:	88 0f       	add	r24, r24
 404:	99 1f       	adc	r25, r25
 406:	88 0f       	add	r24, r24
 408:	99 1f       	adc	r25, r25
 40a:	82 1b       	sub	r24, r18
 40c:	93 0b       	sbc	r25, r19
 40e:	82 58       	subi	r24, 0x82	; 130
 410:	9f 4f       	sbci	r25, 0xFF	; 255
 412:	fc 01       	movw	r30, r24
 414:	80 81       	ld	r24, Z
 416:	48 2f       	mov	r20, r24
 418:	41 50       	subi	r20, 0x01	; 1
 41a:	29 81       	ldd	r18, Y+1	; 0x01
 41c:	3a 81       	ldd	r19, Y+2	; 0x02
 41e:	c9 01       	movw	r24, r18
 420:	88 0f       	add	r24, r24
 422:	99 1f       	adc	r25, r25
 424:	88 0f       	add	r24, r24
 426:	99 1f       	adc	r25, r25
 428:	88 0f       	add	r24, r24
 42a:	99 1f       	adc	r25, r25
 42c:	82 1b       	sub	r24, r18
 42e:	93 0b       	sbc	r25, r19
 430:	82 58       	subi	r24, 0x82	; 130
 432:	9f 4f       	sbci	r25, 0xFF	; 255
 434:	fc 01       	movw	r30, r24
 436:	40 83       	st	Z, r20
				i=-1;
 438:	8f ef       	ldi	r24, 0xFF	; 255
 43a:	9f ef       	ldi	r25, 0xFF	; 255
 43c:	9a 83       	std	Y+2, r25	; 0x02
 43e:	89 83       	std	Y+1, r24	; 0x01
			}
			i++;
 440:	89 81       	ldd	r24, Y+1	; 0x01
 442:	9a 81       	ldd	r25, Y+2	; 0x02
 444:	01 96       	adiw	r24, 0x01	; 1
 446:	9a 83       	std	Y+2, r25	; 0x02
 448:	89 83       	std	Y+1, r24	; 0x01
	
}

void execute(){
		int i =0;
		while(i < new_task_idx){
 44a:	80 91 6e 00 	lds	r24, 0x006E
 44e:	90 91 6f 00 	lds	r25, 0x006F
 452:	29 81       	ldd	r18, Y+1	; 0x01
 454:	3a 81       	ldd	r19, Y+2	; 0x02
 456:	28 17       	cp	r18, r24
 458:	39 07       	cpc	r19, r25
 45a:	0c f4       	brge	.+2      	; 0x45e <execute+0xbc>
 45c:	aa cf       	rjmp	.-172    	; 0x3b2 <execute+0x10>
				scheduled_task[i].ready--;	
				i=-1;
			}
			i++;
		}
}
 45e:	0f 90       	pop	r0
 460:	0f 90       	pop	r0
 462:	df 91       	pop	r29
 464:	cf 91       	pop	r28
 466:	08 95       	ret

00000468 <__vector_10>:

ISR(TIMER0_COMP_vect){
 468:	1f 92       	push	r1
 46a:	0f 92       	push	r0
 46c:	00 90 5f 00 	lds	r0, 0x005F
 470:	0f 92       	push	r0
 472:	11 24       	eor	r1, r1
 474:	2f 93       	push	r18
 476:	3f 93       	push	r19
 478:	4f 93       	push	r20
 47a:	5f 93       	push	r21
 47c:	6f 93       	push	r22
 47e:	7f 93       	push	r23
 480:	8f 93       	push	r24
 482:	9f 93       	push	r25
 484:	af 93       	push	r26
 486:	bf 93       	push	r27
 488:	ef 93       	push	r30
 48a:	ff 93       	push	r31
 48c:	cf 93       	push	r28
 48e:	df 93       	push	r29
 490:	cd b7       	in	r28, 0x3d	; 61
 492:	de b7       	in	r29, 0x3e	; 62
	schedule();
 494:	0e 94 2c 01 	call	0x258	; 0x258 <schedule>
}
 498:	df 91       	pop	r29
 49a:	cf 91       	pop	r28
 49c:	ff 91       	pop	r31
 49e:	ef 91       	pop	r30
 4a0:	bf 91       	pop	r27
 4a2:	af 91       	pop	r26
 4a4:	9f 91       	pop	r25
 4a6:	8f 91       	pop	r24
 4a8:	7f 91       	pop	r23
 4aa:	6f 91       	pop	r22
 4ac:	5f 91       	pop	r21
 4ae:	4f 91       	pop	r20
 4b0:	3f 91       	pop	r19
 4b2:	2f 91       	pop	r18
 4b4:	0f 90       	pop	r0
 4b6:	00 92 5f 00 	sts	0x005F, r0
 4ba:	0f 90       	pop	r0
 4bc:	1f 90       	pop	r1
 4be:	18 95       	reti

000004c0 <main>:
void init_portA(void);
void init_portB(void);


int main(void)
{
 4c0:	cf 93       	push	r28
 4c2:	df 93       	push	r29
 4c4:	cd b7       	in	r28, 0x3d	; 61
 4c6:	de b7       	in	r29, 0x3e	; 62
	
	init();
 4c8:	0e 94 49 00 	call	0x92	; 0x92 <init>
	init_portA();
 4cc:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <init_portA>
	init_portB();
 4d0:	0e 94 87 02 	call	0x50e	; 0x50e <init_portB>
	add_task(showNextDigit,4);
 4d4:	64 e0       	ldi	r22, 0x04	; 4
 4d6:	70 e0       	ldi	r23, 0x00	; 0
 4d8:	83 e9       	ldi	r24, 0x93	; 147
 4da:	92 e0       	ldi	r25, 0x02	; 2
 4dc:	0e 94 bb 00 	call	0x176	; 0x176 <add_task>
	add_task(countSeconds,10);
 4e0:	6a e0       	ldi	r22, 0x0A	; 10
 4e2:	70 e0       	ldi	r23, 0x00	; 0
 4e4:	8a ee       	ldi	r24, 0xEA	; 234
 4e6:	92 e0       	ldi	r25, 0x02	; 2
 4e8:	0e 94 bb 00 	call	0x176	; 0x176 <add_task>
	start_timer();
 4ec:	0e 94 a0 00 	call	0x140	; 0x140 <start_timer>
	
    while(1)
    {
		execute();   
 4f0:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <execute>
    }
 4f4:	fd cf       	rjmp	.-6      	; 0x4f0 <main+0x30>

000004f6 <init_portA>:
}

void init_portA(){
 4f6:	cf 93       	push	r28
 4f8:	df 93       	push	r29
 4fa:	cd b7       	in	r28, 0x3d	; 61
 4fc:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0xFF;
 4fe:	8a e3       	ldi	r24, 0x3A	; 58
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	2f ef       	ldi	r18, 0xFF	; 255
 504:	fc 01       	movw	r30, r24
 506:	20 83       	st	Z, r18
}
 508:	df 91       	pop	r29
 50a:	cf 91       	pop	r28
 50c:	08 95       	ret

0000050e <init_portB>:

void init_portB(){
 50e:	cf 93       	push	r28
 510:	df 93       	push	r29
 512:	cd b7       	in	r28, 0x3d	; 61
 514:	de b7       	in	r29, 0x3e	; 62
	DDRB = 0xFF;
 516:	87 e3       	ldi	r24, 0x37	; 55
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	2f ef       	ldi	r18, 0xFF	; 255
 51c:	fc 01       	movw	r30, r24
 51e:	20 83       	st	Z, r18
}
 520:	df 91       	pop	r29
 522:	cf 91       	pop	r28
 524:	08 95       	ret

00000526 <showNextDigit>:

void showNextDigit(void){
 526:	cf 93       	push	r28
 528:	df 93       	push	r29
 52a:	cd b7       	in	r28, 0x3d	; 61
 52c:	de b7       	in	r29, 0x3e	; 62
	PORTA = Digits[numberAt4Cols[cur_idx]];
 52e:	8b e3       	ldi	r24, 0x3B	; 59
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	20 91 74 00 	lds	r18, 0x0074
 536:	30 91 75 00 	lds	r19, 0x0075
 53a:	20 59       	subi	r18, 0x90	; 144
 53c:	3f 4f       	sbci	r19, 0xFF	; 255
 53e:	f9 01       	movw	r30, r18
 540:	20 81       	ld	r18, Z
 542:	22 2f       	mov	r18, r18
 544:	30 e0       	ldi	r19, 0x00	; 0
 546:	2c 59       	subi	r18, 0x9C	; 156
 548:	3f 4f       	sbci	r19, 0xFF	; 255
 54a:	f9 01       	movw	r30, r18
 54c:	20 81       	ld	r18, Z
 54e:	fc 01       	movw	r30, r24
 550:	20 83       	st	Z, r18
	if(cur_idx==1){
 552:	80 91 74 00 	lds	r24, 0x0074
 556:	90 91 75 00 	lds	r25, 0x0075
 55a:	81 30       	cpi	r24, 0x01	; 1
 55c:	91 05       	cpc	r25, r1
 55e:	91 f4       	brne	.+36     	; 0x584 <showNextDigit+0x5e>
		PORTA <<= 1;
 560:	8b e3       	ldi	r24, 0x3B	; 59
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	2b e3       	ldi	r18, 0x3B	; 59
 566:	30 e0       	ldi	r19, 0x00	; 0
 568:	f9 01       	movw	r30, r18
 56a:	20 81       	ld	r18, Z
 56c:	22 0f       	add	r18, r18
 56e:	fc 01       	movw	r30, r24
 570:	20 83       	st	Z, r18
		PORTA >>= 1;
 572:	8b e3       	ldi	r24, 0x3B	; 59
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	2b e3       	ldi	r18, 0x3B	; 59
 578:	30 e0       	ldi	r19, 0x00	; 0
 57a:	f9 01       	movw	r30, r18
 57c:	20 81       	ld	r18, Z
 57e:	26 95       	lsr	r18
 580:	fc 01       	movw	r30, r24
 582:	20 83       	st	Z, r18
	}
	PORTB = COLS[cur_idx]; 
 584:	88 e3       	ldi	r24, 0x38	; 56
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	20 91 74 00 	lds	r18, 0x0074
 58c:	30 91 75 00 	lds	r19, 0x0075
 590:	20 5a       	subi	r18, 0xA0	; 160
 592:	3f 4f       	sbci	r19, 0xFF	; 255
 594:	f9 01       	movw	r30, r18
 596:	20 81       	ld	r18, Z
 598:	fc 01       	movw	r30, r24
 59a:	20 83       	st	Z, r18
	cur_idx++;
 59c:	80 91 74 00 	lds	r24, 0x0074
 5a0:	90 91 75 00 	lds	r25, 0x0075
 5a4:	01 96       	adiw	r24, 0x01	; 1
 5a6:	90 93 75 00 	sts	0x0075, r25
 5aa:	80 93 74 00 	sts	0x0074, r24
	cur_idx%=MAX_COL;
 5ae:	80 91 74 00 	lds	r24, 0x0074
 5b2:	90 91 75 00 	lds	r25, 0x0075
 5b6:	83 70       	andi	r24, 0x03	; 3
 5b8:	90 78       	andi	r25, 0x80	; 128
 5ba:	99 23       	and	r25, r25
 5bc:	24 f4       	brge	.+8      	; 0x5c6 <showNextDigit+0xa0>
 5be:	01 97       	sbiw	r24, 0x01	; 1
 5c0:	8c 6f       	ori	r24, 0xFC	; 252
 5c2:	9f 6f       	ori	r25, 0xFF	; 255
 5c4:	01 96       	adiw	r24, 0x01	; 1
 5c6:	90 93 75 00 	sts	0x0075, r25
 5ca:	80 93 74 00 	sts	0x0074, r24
}
 5ce:	df 91       	pop	r29
 5d0:	cf 91       	pop	r28
 5d2:	08 95       	ret

000005d4 <countSeconds>:

void countSeconds(void){
 5d4:	cf 93       	push	r28
 5d6:	df 93       	push	r29
 5d8:	cd b7       	in	r28, 0x3d	; 61
 5da:	de b7       	in	r29, 0x3e	; 62
	++currentSecond;
 5dc:	80 91 76 00 	lds	r24, 0x0076
 5e0:	90 91 77 00 	lds	r25, 0x0077
 5e4:	01 96       	adiw	r24, 0x01	; 1
 5e6:	90 93 77 00 	sts	0x0077, r25
 5ea:	80 93 76 00 	sts	0x0076, r24
	currentSecond%=10000;
 5ee:	80 91 76 00 	lds	r24, 0x0076
 5f2:	90 91 77 00 	lds	r25, 0x0077
 5f6:	20 e1       	ldi	r18, 0x10	; 16
 5f8:	37 e2       	ldi	r19, 0x27	; 39
 5fa:	b9 01       	movw	r22, r18
 5fc:	0e 94 43 03 	call	0x686	; 0x686 <__divmodhi4>
 600:	90 93 77 00 	sts	0x0077, r25
 604:	80 93 76 00 	sts	0x0076, r24
	numberAt4Cols[0] = currentSecond/1000;
 608:	80 91 76 00 	lds	r24, 0x0076
 60c:	90 91 77 00 	lds	r25, 0x0077
 610:	28 ee       	ldi	r18, 0xE8	; 232
 612:	33 e0       	ldi	r19, 0x03	; 3
 614:	b9 01       	movw	r22, r18
 616:	0e 94 43 03 	call	0x686	; 0x686 <__divmodhi4>
 61a:	9b 01       	movw	r18, r22
 61c:	c9 01       	movw	r24, r18
 61e:	80 93 70 00 	sts	0x0070, r24
	numberAt4Cols[1] = (currentSecond%1000)/100;
 622:	80 91 76 00 	lds	r24, 0x0076
 626:	90 91 77 00 	lds	r25, 0x0077
 62a:	28 ee       	ldi	r18, 0xE8	; 232
 62c:	33 e0       	ldi	r19, 0x03	; 3
 62e:	b9 01       	movw	r22, r18
 630:	0e 94 43 03 	call	0x686	; 0x686 <__divmodhi4>
 634:	24 e6       	ldi	r18, 0x64	; 100
 636:	30 e0       	ldi	r19, 0x00	; 0
 638:	b9 01       	movw	r22, r18
 63a:	0e 94 43 03 	call	0x686	; 0x686 <__divmodhi4>
 63e:	9b 01       	movw	r18, r22
 640:	c9 01       	movw	r24, r18
 642:	80 93 71 00 	sts	0x0071, r24
	numberAt4Cols[2] = (currentSecond%100)/10;
 646:	80 91 76 00 	lds	r24, 0x0076
 64a:	90 91 77 00 	lds	r25, 0x0077
 64e:	24 e6       	ldi	r18, 0x64	; 100
 650:	30 e0       	ldi	r19, 0x00	; 0
 652:	b9 01       	movw	r22, r18
 654:	0e 94 43 03 	call	0x686	; 0x686 <__divmodhi4>
 658:	2a e0       	ldi	r18, 0x0A	; 10
 65a:	30 e0       	ldi	r19, 0x00	; 0
 65c:	b9 01       	movw	r22, r18
 65e:	0e 94 43 03 	call	0x686	; 0x686 <__divmodhi4>
 662:	9b 01       	movw	r18, r22
 664:	c9 01       	movw	r24, r18
 666:	80 93 72 00 	sts	0x0072, r24
	numberAt4Cols[3] = currentSecond%10;
 66a:	80 91 76 00 	lds	r24, 0x0076
 66e:	90 91 77 00 	lds	r25, 0x0077
 672:	2a e0       	ldi	r18, 0x0A	; 10
 674:	30 e0       	ldi	r19, 0x00	; 0
 676:	b9 01       	movw	r22, r18
 678:	0e 94 43 03 	call	0x686	; 0x686 <__divmodhi4>
 67c:	80 93 73 00 	sts	0x0073, r24
 680:	df 91       	pop	r29
 682:	cf 91       	pop	r28
 684:	08 95       	ret

00000686 <__divmodhi4>:
 686:	97 fb       	bst	r25, 7
 688:	07 2e       	mov	r0, r23
 68a:	16 f4       	brtc	.+4      	; 0x690 <__divmodhi4+0xa>
 68c:	00 94       	com	r0
 68e:	07 d0       	rcall	.+14     	; 0x69e <__divmodhi4_neg1>
 690:	77 fd       	sbrc	r23, 7
 692:	09 d0       	rcall	.+18     	; 0x6a6 <__divmodhi4_neg2>
 694:	0e 94 57 03 	call	0x6ae	; 0x6ae <__udivmodhi4>
 698:	07 fc       	sbrc	r0, 7
 69a:	05 d0       	rcall	.+10     	; 0x6a6 <__divmodhi4_neg2>
 69c:	3e f4       	brtc	.+14     	; 0x6ac <__divmodhi4_exit>

0000069e <__divmodhi4_neg1>:
 69e:	90 95       	com	r25
 6a0:	81 95       	neg	r24
 6a2:	9f 4f       	sbci	r25, 0xFF	; 255
 6a4:	08 95       	ret

000006a6 <__divmodhi4_neg2>:
 6a6:	70 95       	com	r23
 6a8:	61 95       	neg	r22
 6aa:	7f 4f       	sbci	r23, 0xFF	; 255

000006ac <__divmodhi4_exit>:
 6ac:	08 95       	ret

000006ae <__udivmodhi4>:
 6ae:	aa 1b       	sub	r26, r26
 6b0:	bb 1b       	sub	r27, r27
 6b2:	51 e1       	ldi	r21, 0x11	; 17
 6b4:	07 c0       	rjmp	.+14     	; 0x6c4 <__udivmodhi4_ep>

000006b6 <__udivmodhi4_loop>:
 6b6:	aa 1f       	adc	r26, r26
 6b8:	bb 1f       	adc	r27, r27
 6ba:	a6 17       	cp	r26, r22
 6bc:	b7 07       	cpc	r27, r23
 6be:	10 f0       	brcs	.+4      	; 0x6c4 <__udivmodhi4_ep>
 6c0:	a6 1b       	sub	r26, r22
 6c2:	b7 0b       	sbc	r27, r23

000006c4 <__udivmodhi4_ep>:
 6c4:	88 1f       	adc	r24, r24
 6c6:	99 1f       	adc	r25, r25
 6c8:	5a 95       	dec	r21
 6ca:	a9 f7       	brne	.-22     	; 0x6b6 <__udivmodhi4_loop>
 6cc:	80 95       	com	r24
 6ce:	90 95       	com	r25
 6d0:	bc 01       	movw	r22, r24
 6d2:	cd 01       	movw	r24, r26
 6d4:	08 95       	ret

000006d6 <_exit>:
 6d6:	f8 94       	cli

000006d8 <__stop_program>:
 6d8:	ff cf       	rjmp	.-2      	; 0x6d8 <__stop_program>
